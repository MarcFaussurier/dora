class NodeBitMap {
  var entries: Array<long> = nil;

  pub fun set(node: Node, value: bool) {
    self.setId(node.id(), value);
  }

  fun setId(id: int, value: bool) {
    if self.entries === nil && !value {
      return;
    }

    let index = id / 64;

    if self.entries !== nil && index < self.entries.len() {
      self.setBit(index, id % 64, value);

    } else if value {
      let new = Array::<long>(int::max(4, index+1));

      if self.entries !== nil {
        arraycopy::<long>(self.entries, 0, new, 0, self.entries.len());
      }

      self.entries = new;
      self.setBit(index, id, value);
    }
  }

  fun setBit(index: int, bit: int, value: bool) {
    assert(index < self.entries.len());
    let old = self.entries[index];

    if value {
      self.entries[index] = old | (1L << bit.toLong());
    } else {
      self.entries[index] = old & !(1L << bit.toLong());
    }
  }

  pub fun get(node: Node) -> bool {
    return self.getId(node.id());
  }

  fun getId(id: int) -> bool {
    if self.entries === nil {
      return false;
    }

    let index = id / 64;

    if index < self.entries.len() {
      let value = self.entries[index];
      let bit = id % 64;

      if value & (1L << bit.toLong()) != 0L {
        return true;
      } else {
        return false;
      }
    }

    return false;
  }
}

fun testNodeBitMap(t: Testing) {
  let bm = NodeBitMap();

  bm.setId(0, false);
  assert(bm.entries === nil);

  bm.setId(64, false);
  assert(bm.entries === nil);

  bm.setId(2, true);
  assert(bm.entries.len() == 4);
  assert(bm.entries[0] == 4L);

  bm.setId(64, true);
  assert(bm.entries.len() == 4);
  assert(bm.entries[0] == 4L);
  assert(bm.entries[1] == 1L);

  assert(bm.getId(1000) == false);
  assert(bm.getId(2) == true);
  assert(bm.getId(3) == false);
  assert(bm.getId(64) == true);
  assert(bm.getId(65) == false);
}
