class GraphTrimmer(let graph: Graph) {
    let bm: NodeBitMap = NodeBitMap();
    let lives: Vec<Node> = Vec::<Node>();

    fun trim() {
        self.markLive(self.graph.getEnd());

        var i = 0;

        while i < self.lives.len() {
            let live = self.lives[i];

            var j = 0;

            while j < live.getInputCount() {
                let input = live.getInput(j);
                self.markLive(input);
                j = j + 1;
            }

            i = i + 1;
        }

        i = 0;

        while i < self.lives.len() {
            let live = self.lives[i];
            assert(self.isLive(live));

            var j = 0;

            while j < live.usageCount {
                let use = live.usages[j];

                if !self.isLive(use) {
                    live.removeUsage(use);
                } else {
                    j = j + 1;
                }
            }

            i = i + 1;
        }
    }

    fun markLive(node: Node) {
        if !self.isLive(node) {
            self.bm.set(node, true);
            self.lives.push(node);
        }
    }

    fun isLive(node: Node) -> bool {
        return self.bm.get(node);
    }
}

fun testTrimmerSimple(t: Testing) {
    let g = Graph();

    let s = g.newNode0(Start(0));
    let e = g.newNode1(End(1), s);

    g.setStart(s);
    g.setEnd(e);

    GraphTrimmer(g).trim();

    assert(g.getStart() === s);
    assert(g.getEnd() === e);
    assert(e.getInput(0) === s);
}

fun testTrimmerDeadUseOfStart(t: Testing) {
    let g = Graph();

    let s = g.newNode0(Start(0));
    let e = g.newNode1(End(1), s);
    let u = g.newNode1(TestControlOperator(1), s);

    g.setStart(s);
    g.setEnd(e);

    assertNodeUsages2(s, e, u);

    GraphTrimmer(g).trim();

    assertNodeUsage(s, e);
}

fun testTrimmerDeadAndLiveUseOfStart(t: Testing) {
    let g = Graph();

    let s = g.newNode0(Start(0));
    let l = g.newNode1(TestControlOperator(1), s);
    let e = g.newNode1(End(1), l);
    let u = g.newNode1(TestControlOperator(1), s);

    g.setStart(s);
    g.setEnd(e);

    assertNodeUsages2(s, l, u);

    GraphTrimmer(g).trim();

    assertNodeUsage(s, l);
}