//= vm-args "--opt=int_add,int_sub,int_mul,int_div,int_mod,int_shl,int_ashr,int_lshr,int_or,int_and,int_xor"

fun main() {
    assert(int_add(-2, 5) == 3);
    assert(int_add(0, 3) == 3);
    assert(int_add(2, 7) == 9);

    assert(int_sub(-2, 5) == -7);
    assert(int_sub(0, 3) == -3);
    assert(int_sub(7, 2) == 5);

    assert(int_mul(-2, 5) == -10);
    assert(int_mul(0, 3) == 0);
    assert(int_mul(7, 2) == 14);

    assert(int_div(100, 5) == 20);
    assert(int_div(10, 3) == 3);
    assert(int_div(-3, -1) == 3);

    assert(int_mod(-4, 3) == -1);
    assert(int_mod(10, 3) == 1);
    assert(int_mod(-3, -1) == 0);

    assert(int_shl(1, 0) == 1);
    assert(int_shl(4, 1) == 8);
    assert(int_shl(-4, 1) == -8);

    assert(int_ashr(5, 1) == 2);
    assert(int_ashr(4, 1) == 2);
    assert(int_ashr(-4, 1) == -2);

    assert(int_lshr(1, 1) == 0);
    assert(int_lshr(4, 1) == 2);
    assert(int_lshr(-4, 1) == 2147483646);

    assert(int_and(5, 2) == 0);
    assert(int_and(3, 1) == 1);

    assert(int_or(5, 2) == 7);
    assert(int_or(3, 1) == 3);

    assert(int_xor(5, 2) == 7);
    assert(int_xor(3, 1) == 2);
}

fun int_add(a: int, b: int) -> int {
    return a + b;
}

fun int_sub(a: int, b: int) -> int {
    return a - b;
}

fun int_mul(a: int, b: int) -> int {
    return a * b;
}

fun int_div(a: int, b: int) -> int {
    return a / b;
}

fun int_mod(a: int, b: int) -> int {
    return a % b;
}

fun int_shl(a: int, b: int) -> int {
    return a << b;
}

fun int_lshr(a: int, b: int) -> int {
    return a >>> b;
}

fun int_ashr(a: int, b: int) -> int {
    return a >> b;
}

fun int_and(a: int, b: int) -> int {
    return a & b;
}

fun int_or(a: int, b: int) -> int {
    return a | b;
}

fun int_xor(a: int, b: int) -> int {
    return a ^ b;
}