class Vec<T> {
  var array: Array<T> = nil;
  var length: int = 0;

  fun get(idx: int) -> T {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    return self.array[idx];
  }

  fun set(idx: int, val: T) {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    self.array[idx] = val;
  }

  fun push(val: T) {
    var newcap = self.capacity();

    if self.length == newcap {
      if newcap == 0 {
        newcap = 4;
      } else {
        newcap = newcap * 2;
      }

      let newarray = Array::<T>(newcap);

      var i = 0;

      while i < self.length {
        newarray[i] = self.array[i];
        i = i + 1;
      }

      self.array = newarray;
    }

    self.array[self.length] = val;
    self.length = self.length + 1;
  }

  fun pop() -> T {
    if self.length == 0 {
      fatalError("no element left to pop");
    }

    let newlength = self.length - 1;
    let temp = self.array[newlength];

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    self.array[newlength] = defaultValue::<T>();

    self.length = newlength;

    return temp;
  }

  fun trimToLen() {
    if self.length != self.capacity() {
      if self.length == 0 {
        self.array = nil;
      } else {
        let newarray = Array::<T>(self.length);

        var i = 0;

        while i < self.length {
          newarray[i] = self.array[i];
          i = i + 1;
        }

        self.array = newarray;
      }
    }
  }

  fun removeAt(var ind: int) -> T {
    assert(ind < self.length);
    let temp = self[ind];
    let len = self.length;

    while ind < len - 1 {
      self[ind] = self[ind+1];
      ind = ind + 1;
    }

    self[ind] = defaultValue::<T>();
    self.length = ind;

    return temp;
  }

  fun len() -> int {
    return self.length;
  }

  fun capacity() -> int {
    if self.array === nil {
      return 0;
    } else {
      return self.array.len();
    }
  }
}

class String(let data: Array<byte>) {
    fun len() -> int {
        return self.data.len();
    }

    fun isEmpty() -> bool {
        return self.data.len() == 0;
    }

    fun equals(val: String) -> bool {
        var i = 0;

        if self.data.len() != val.data.len() {
            return false;
        }

        while i < self.data.len() {
            if self.data[i] != val.data[i] {
                return false;
            }
        }

        return true;
    }

    fun chars() -> StringIterator {
        return StringIterator(self.data, 0);
    }
}

class StringIterator(let value: Array<byte>, var ind: int) {
    fun hasNext() -> bool {
        return ind < self.value.len();
    }

    fun next() -> char {
        var ch = self.value[self.ind];

        if ch <= 0x7FY {
            self.ind = self.ind + 1;
            return ch.toInt().toChar();
        }

        if ch <= 0xBFY {
            fatalError("unexpected continuation byte");
        }

        if ch <= 0xDFY {
            let cp = (ch.toInt() & 0x1F) << 6 | (self.value[self.ind + 1].toInt() & 0x3F);
            self.ind = self.ind + 2;
            return cp.toChar();
        }

        if ch <= 0xEFY {
            let cp = (ch.toInt() & 0xF) << 12 |
                 (self.value[self.ind + 1].toInt() & 0x3F) << 6 |
                 (self.value[self.ind + 2].toInt() & 0x3F);
            self.ind = self.ind + 3;
            return cp.toChar();
        }

        if ch <= 0xF7Y {
            let cp = (ch.toInt() & 0x3) << 18 |
                 (self.value[self.ind + 1].toInt() & 0x3F) << 12 |
                 (self.value[self.ind + 2].toInt() & 0x3F) << 6 |
                 (self.value[self.ind + 3].toInt() & 0x3F);
            self.ind = self.ind + 4;
            return cp.toChar();
        }

        fatalError("invalid utf8: " + ch.toInt().toString());
        return '\0';
    }
}