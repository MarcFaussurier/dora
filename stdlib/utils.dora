class Vec<T> {
  var array: Array<T> = nil;
  var length: int = 0;

  fun get(idx: int) -> T {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    return self.array[idx];
  }

  fun set(idx: int, val: T) {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    self.array[idx] = val;
  }

  fun push(val: T) {
    var newcap = self.capacity();

    if self.length == newcap {
      if newcap == 0 {
        newcap = 4;
      } else {
        newcap = newcap * 2;
      }

      let newarray = Array::<T>(newcap);

      var i = 0;

      while i < self.length {
        newarray[i] = self.array[i];
        i = i + 1;
      }

      self.array = newarray;
    }

    self.array[self.length] = val;
    self.length = self.length + 1;
  }

  fun pop() -> T {
    if self.length == 0 {
      fatalError("no element left to pop");
    }

    let newlength = self.length - 1;
    let temp = self.array[newlength];

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    self.array[newlength] = defaultValue::<T>();

    self.length = newlength;

    return temp;
  }

  fun trimToLen() {
    if self.length != self.capacity() {
      if self.length == 0 {
        self.array = nil;
      } else {
        let newarray = Array::<T>(self.length);

        var i = 0;

        while i < self.length {
          newarray[i] = self.array[i];
          i = i + 1;
        }

        self.array = newarray;
      }
    }
  }

  fun removeAt(var ind: int) -> T {
    assert(ind < self.length);
    let temp = self[ind];
    let len = self.length;

    while ind < len - 1 {
      self[ind] = self[ind+1];
      ind = ind + 1;
    }

    self[ind] = defaultValue::<T>();
    self.length = ind;

    return temp;
  }

  fun len() -> int {
    return self.length;
  }

  fun capacity() -> int {
    if self.array === nil {
      return 0;
    } else {
      return self.array.len();
    }
  }
}

class String(let data: Array<byte>) {
    static fun from(val: Str) -> String {
        let data = Array::<byte>(val.len());
        var i = 0;

        while i < val.len() {
            data[i] = val[i].toInt().toByte();
            i = i + 1;
        }

        return String(data);
    }

    static fun fromBytesPart(val: Array<byte>, offset: int, len: int) throws -> String {
        let data = Array::<byte>(len);
        var i = offset;
        var end = offset + len;

        while i < end {
            data[i] = val[i];
            i = i + 1;
        }

        if !isValidUtf8(data) {
          throw "invalid utf8 encoding";
        }


        return String(data);
    }

    static fun fromBytes(val: Array<byte>) throws -> String {
        return try String::fromBytesPart(val, 0, val.len());
    }

    fun len() -> int {
        return self.data.len();
    }

    fun isEmpty() -> bool {
        return self.data.len() == 0;
    }

    fun equals(val: String) -> bool {
        var i = 0;

        if self.data.len() != val.data.len() {
            return false;
        }

        while i < self.data.len() {
            if self.data[i] != val.data[i] {
                return false;
            }

            i = i + 1;
        }

        return true;
    }

    fun codePoints() -> StringCodePointIterator {
        return StringCodePointIterator(self.data, 0);
    }
}

fun isValidUtf8(data: Array<byte>) -> bool {
    var i = 0;

    while i < data.len() {
        let by = data[i].toInt();
        var codePoint = 0;
        var nextBytes = 0;
        var min = 0;
        var max = 0;

        if by & 0x80 == 0 {
             nextBytes = 0;
             i = i + 1;
             continue;

        } else if by & 0xC0 == 0x80 {
             return false;

        } else if by & 0xE0 == 0xC0 {
             codePoint = by & 0x1F;
             nextBytes = 1;
             min = 0x80;
             max = 0x7FF;

        } else if by & 0xF0 == 0xE0 {
             codePoint = by & 0xF;
             nextBytes = 2;
             min = 0x800;
             max = 0xFFFF;

        } else if by & 0xF8 == 0xF0 {
             codePoint = by & 0x7;
             nextBytes = 3;
             min = 0x10000;
             max = 0x10FFFF;
        }

        while nextBytes > 0 {
             nextBytes = nextBytes - 1;
             i = i + 1;

             if i >= data.len() {
                  return false;
             }

             let by = data[i].toInt();

             if by & 0xC0 != 0x80 {
                 return false;
             }

             codePoint = (codePoint << 6) | (by & 0x3F);
        }

        if codePoint < min || codePoint > max {
            return false;
        }

        i = i + 1;
    }

    return true;
}

class StringCodePointIterator(let value: Array<byte>, var ind: int) {
    fun hasNext() -> bool {
        return self.ind < self.value.len();
    }

    fun next() -> char {
        var ch = self.value[self.ind];

        if ch <= 0x7FY {
            self.ind = self.ind + 1;
            return ch.toInt().toChar();
        }

        if ch <= 0xBFY {
            fatalError("unexpected continuation byte");
        }

        if ch <= 0xDFY {
            let cp = (ch.toInt() & 0x1F) << 6 | (self.value[self.ind + 1].toInt() & 0x3F);
            self.ind = self.ind + 2;
            return cp.toChar();
        }

        if ch <= 0xEFY {
            let cp = (ch.toInt() & 0xF) << 12 |
                 (self.value[self.ind + 1].toInt() & 0x3F) << 6 |
                 (self.value[self.ind + 2].toInt() & 0x3F);
            self.ind = self.ind + 3;
            return cp.toChar();
        }

        if ch <= 0xF7Y {
            let cp = (ch.toInt() & 0x3) << 18 |
                 (self.value[self.ind + 1].toInt() & 0x3F) << 12 |
                 (self.value[self.ind + 2].toInt() & 0x3F) << 6 |
                 (self.value[self.ind + 3].toInt() & 0x3F);
            self.ind = self.ind + 4;
            return cp.toChar();
        }

        fatalError("invalid utf8: " + ch.toInt().toString());
        return '\0';
    }

    fun len() -> int {
        var i = 0;

        while self.hasNext() {
            i = i + 1;
            self.next();
        }

        return i;
    }

    fun toString() -> String {
        return try! String::fromBytesPart(self.value, self.ind, self.value.len() - self.ind);
    }
}

class StringBuf(var buf: Array<byte>, var length: int) {
    init(): self(Array::<byte>(0), 0) {

    }

    fun len() -> int {
        return self.length;
    }

    fun capacity() -> int {
        return self.buf.len();
    }

    // reserve `elements` bytes
    // (capacity - length >= elements)
    fun reserve(elements: int) {
        if self.capacity() - self.len() >= elements {
            return;
        }

        let newcap = self.newCapacity(elements);
        let newbuf = Array::<byte>(newcap);
        var i = 0;

        while i < self.buf.len() {
            newbuf[i] = self.buf[i];
            i = i + 1;
        }

        self.buf = newbuf;
    }

    fun newCapacity(reserve: int) -> int {
        var len = self.length;

        if len == 0 {
            len = 4;
        }

        let c1 = (len + reserve + 7) & !8;
        let c2 = len * 2;

        if c1 > c2 {
            return c1;
        } else if c2 - c1 > 32 {
            return c1;
        } else {
            return c2;
        }
    }

    fun appendChar(ch: char) -> StringBuf {
        let chLen = ch.lenUtf8();
        self.reserve(chLen);
        ch.encodeUtf8(self.buf, self.length);
        self.length = self.length + chLen;
        return self;
    }

    fun appendString(value: String) -> StringBuf {
        self.reserve(value.len());
        var i = 0;

        while i < value.len() {
            self.buf[self.length + i] = value.data[i];
            i = i + 1;
        }

        self.length = self.length + value.len();

        return self;
    }

    fun toString() -> String {
        return try! String::fromBytesPart(self.buf, 0, self.len());
    }
}
