internal fun fatalError(msg: Str);
internal fun abort();
internal fun exit(status: int);
fun unreachable() {
  fatalError("unreachable code");
}

internal fun print(text: Str);
internal fun println(text: Str);
internal fun assert(val: bool);
internal fun argc() -> int;
internal fun argv(idx: int) -> Str;
internal fun forceCollect();

internal class bool {
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun equals(rhs: bool) -> bool;
  internal fun not() -> bool;
}

internal class byte {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: byte) -> bool;
  internal fun compareTo(rhs: byte) -> int;
}

internal class char {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: char) -> bool;
  internal fun compareTo(rhs: char) -> int;
}

internal class int {
  internal fun toByte() -> byte;
  internal fun toChar() -> char;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun toFloat() -> float;
  internal fun toDouble() -> double;

  internal fun equals(rhs: int) -> bool;
  internal fun compareTo(rhs: int) -> int;

  internal fun plus(rhs: int) -> int;
  internal fun minus(rhs: int) -> int;
  internal fun times(rhs: int) -> int;
  internal fun div(rhs: int) -> int;
  internal fun mod(rhs: int) -> int;

  internal fun bitwiseOr(rhs: int) -> int;
  internal fun bitwiseAnd(rhs: int) -> int;
  internal fun bitwiseXor(rhs: int) -> int;

  internal fun shiftLeft(rhs: int) -> int;
  internal fun shiftRight(rhs: int) -> int;
  internal fun unsignedShiftRight(rhs: int) -> int;

  internal fun unaryPlus() -> int;
  internal fun unaryMinus() -> int;
  internal fun not() -> int;

  fun abs() -> int {
    if self >= 0 {
      return self;
    } else {
      return -self;
    }
  }

  static fun max_value() -> int {
    return 2147483647;
  }

  static fun min_value() -> int {
    return -2147483648;
  }
}

internal class long {
  internal fun toByte() -> byte;
  internal fun toChar() -> char;
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun toFloat() -> float;
  internal fun toDouble() -> double;

  internal fun equals(rhs: long) -> bool;
  internal fun compareTo(rhs: long) -> int;

  internal fun plus(rhs: long) -> long;
  internal fun minus(rhs: long) -> long;
  internal fun times(rhs: long) -> long;
  internal fun div(rhs: long) -> long;
  internal fun mod(rhs: long) -> long;

  internal fun bitwiseOr(rhs: long) -> long;
  internal fun bitwiseAnd(rhs: long) -> long;
  internal fun bitwiseXor(rhs: long) -> long;

  internal fun shiftLeft(rhs: long) -> long;
  internal fun shiftRight(rhs: long) -> long;
  internal fun unsignedShiftRight(rhs: long) -> long;

  internal fun unaryPlus() -> long;
  internal fun unaryMinus() -> long;
  internal fun not() -> long;

  static fun max_value() -> long {
    return 9223372036854775807L;
  }

  static fun min_value() -> long {
    return -9223372036854775808L;
  }
}

internal class Str {
  internal fun equals(rhs: Str) -> bool;
  internal fun compareTo(rhs: Str) -> int;

  internal fun len() -> int;
  internal fun parseInt() -> int;
  internal fun plus(rhs: Str) -> Str;

  internal fun get(idx: int) -> byte;
  internal fun set(idx: int, val: int);
}

internal class float {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toDouble() -> double;
  internal fun toString() -> Str;

  internal fun equals(rhs: float) -> bool;
  internal fun compareTo(rhs: float) -> int;

  internal fun plus(rhs: float) -> float;
  internal fun minus(rhs: float) -> float;
  internal fun times(rhs: float) -> float;
  internal fun div(rhs: float) -> float;

  internal fun unaryPlus() -> float;
  internal fun unaryMinus() -> float;

  internal fun isNan() -> bool;
  internal fun sqrt() -> float;
}

internal class double {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toFloat() -> float;
  internal fun toString() -> Str;

  internal fun equals(rhs: double) -> bool;
  internal fun compareTo(rhs: double) -> int;

  internal fun plus(rhs: double) -> double;
  internal fun minus(rhs: double) -> double;
  internal fun times(rhs: double) -> double;
  internal fun div(rhs: double) -> double;

  internal fun unaryPlus() -> double;
  internal fun unaryMinus() -> double;

  internal fun isNan() -> bool;
  internal fun sqrt() -> double;
}

internal class Array<T> {
  init() {}
  init(len: int) {}
  init(len: int, value: T) {
    var i = 0;

    while i < len {
      self[i] = value;
      i = i + 1;
    }
  }

  internal fun len() -> int;
  internal fun get(idx: int) -> T;
  internal fun set(idx: int, val: T);
}

class Vec<T> {
  var array: Array<T> = nil;
  var length: int = 0;

  fun get(idx: int) -> T {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    return self.array[idx];
  }

  fun set(idx: int, val: T) {
    if idx < 0 || idx >= self.length {
      fatalError("index out of bounds for vector");
    }

    self.array[idx] = val;
  }

  fun push(val: T) {
    var newcap = self.capacity();

    if self.length == newcap {
      if newcap == 0 {
        newcap = 4;
      } else {
        newcap = newcap * 2;
      }

      let newarray = Array::<T>(newcap);

      var i = 0;

      while i < self.length {
        newarray[i] = self.array[i];
        i = i + 1;
      }

      self.array = newarray;
    }

    self.array[self.length] = val;
    self.length = self.length + 1;
  }

  fun pop() -> T {
    if self.length == 0 {
      fatalError("no element left to pop");
    }

    let newlength = self.length - 1;
    let temp = self.array[newlength];

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    self.array[newlength] = defaultValue::<T>();

    self.length = newlength;

    return temp;
  }

  fun trimToLen() {
    if self.length != self.capacity() {
      if self.length == 0 {
        self.array = nil;
      } else {
        let newarray = Array::<T>(self.length);

        var i = 0;

        while i < self.length {
          newarray[i] = self.array[i];
          i = i + 1;
        }

        self.array = newarray;
      }
    }
  }

  fun removeAt(var ind: int) -> T {
    assert(ind < self.length);
    let temp = self[ind];
    let len = self.length;

    while ind < len - 1 {
      self[ind] = self[ind+1];
      ind = ind + 1;
    }

    self[ind] = defaultValue::<T>();
    self.length = ind;

    return temp;
  }

  fun len() -> int {
    return self.length;
  }

  fun capacity() -> int {
    if self.array === nil {
      return 0;
    } else {
      return self.array.len();
    }
  }
}

internal fun defaultValue<T>() -> T;

internal fun loadFunction(name: Str) -> long;
internal fun call0(fct: long) -> long;
internal fun call1(fct: long, arg0: long) -> long;
internal fun call2(fct: long, arg0: long, arg1: long) -> long;
internal fun call3(fct: long, arg0: long, arg1: long, arg2: long) -> long;

internal fun native_malloc(size: long) -> long;
internal fun native_free(address: long);
internal fun set_uint8(address: long, val: byte);

fun native_string(val: Str) -> long {
  var i = 0;
  let len = val.len();

  let ptr = native_malloc(len.toLong()+1L);

  while i < len {
    set_uint8(ptr+i.toLong(), val[i]);
    i = i + 1;
  }

  set_uint8(ptr+len.toLong(), 0Y);

  return ptr;
}

fun getpid() -> int {
  let fct = loadFunction("getpid");
  return call0(fct).toInt();
}

fun getppid() -> int {
  let fct = loadFunction("getppid");
  return call0(fct).toInt();
}

fun sleep(seconds: int) {
  let fct = loadFunction("sleep");
  call1(fct, seconds.toLong());
}

class File(let name: Str) {
  fun delete() throws {
    let ptr = native_string(self.name);
    let fct = loadFunction("unlink");
    let res = call1(fct, ptr);
    native_free(ptr);

    if res != 0L {
      throw Exception("could not delete file");
    }
  }
}

class Exception(msg: Str)

open abstract class Thread {
  internal fun start();

  abstract fun run();
}
