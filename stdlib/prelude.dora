fun abs(val: int) -> int {
  if val >= 0 {
    return val;
  } else {
    return -val;
  }
}

internal fun print(text: Str);
internal fun println(text: Str);
internal fun assert(val: bool);
internal fun argc() -> int;
internal fun argv(idx: int) -> Str;
internal fun forceCollect();
internal fun intArrayWith(len: int, val: int) -> IntArray;
internal fun emptyIntArray() -> IntArray;

internal class bool {
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun equals(rhs: bool) -> bool;
  internal fun not() -> bool;
}

internal class byte {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: byte) -> bool;
  internal fun compareTo(rhs: byte) -> int;
}

internal class int {
  internal fun toByte() -> byte;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: int) -> bool;
  internal fun compareTo(rhs: int) -> int;

  internal fun plus(rhs: int) -> int;
  internal fun minus(rhs: int) -> int;
  internal fun times(rhs: int) -> int;
  internal fun div(rhs: int) -> int;
  internal fun mod(rhs: int) -> int;

  internal fun bitwiseOr(rhs: int) -> int;
  internal fun bitwiseAnd(rhs: int) -> int;
  internal fun bitwiseXor(rhs: int) -> int;

  internal fun shiftLeft(rhs: int) -> int;
  internal fun shiftRight(rhs: int) -> int;
  internal fun unsignedShiftRight(rhs: int) -> int;

  internal fun unaryPlus() -> int;
  internal fun unaryMinus() -> int;
  internal fun not() -> int;
}

internal class long {
  internal fun toByte() -> byte;
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun equals(rhs: long) -> bool;
  internal fun compareTo(rhs: long) -> int;

  internal fun plus(rhs: long) -> long;
  internal fun minus(rhs: long) -> long;
  internal fun times(rhs: long) -> long;
  internal fun div(rhs: long) -> long;
  internal fun mod(rhs: long) -> long;

  internal fun bitwiseOr(rhs: long) -> long;
  internal fun bitwiseAnd(rhs: long) -> long;
  internal fun bitwiseXor(rhs: long) -> long;

  internal fun shiftLeft(rhs: long) -> long;
  internal fun shiftRight(rhs: long) -> long;
  internal fun unsignedShiftRight(rhs: long) -> long;

  internal fun unaryPlus() -> long;
  internal fun unaryMinus() -> long;
  internal fun not() -> long;
}

internal class Str {
  internal fun equals(rhs: Str) -> bool;
  internal fun compareTo(rhs: Str) -> int;

  internal fun len() -> int;
  internal fun parseInt() -> int;
  internal fun plus(rhs: Str) -> Str;
}

internal class IntArray {
  internal fun len() -> int;
  internal fun get(idx: int) -> int;
  internal fun set(idx: int, val: int);
}

internal fun loadFunction(name: Str) -> long;
internal fun call0(fct: long) -> long;
internal fun call1(fct: long, arg0: long) -> long;
internal fun call2(fct: long, arg0: long) -> long;
internal fun call3(fct: long, arg0: long) -> long;

fun getpid() -> int {
  let fct = loadFunction("getpid");
  return call0(fct).toInt();
}