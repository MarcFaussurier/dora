fun abs(val: int) -> int {
  if val >= 0 {
    return val;
  } else {
    return -val;
  }
}

internal fun print(text: Str);
internal fun println(text: Str);
internal fun assert(val: bool);
internal fun argc() -> int;
internal fun argv(idx: int) -> Str;
internal fun forceCollect();

internal fun byteArrayWith(len: int, val: byte) -> ByteArray;
internal fun emptyByteArray() -> ByteArray;

internal fun intArrayWith(len: int, val: int) -> IntArray;
internal fun emptyIntArray() -> IntArray;

internal fun longArrayWith(len: int, val: long) -> LongArray;
internal fun emptyLongArray() -> LongArray;

internal class bool {
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun equals(rhs: bool) -> bool;
  internal fun not() -> bool;
}

internal class byte {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: byte) -> bool;
  internal fun compareTo(rhs: byte) -> int;
}

internal class int {
  internal fun toByte() -> byte;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: int) -> bool;
  internal fun compareTo(rhs: int) -> int;

  internal fun plus(rhs: int) -> int;
  internal fun minus(rhs: int) -> int;
  internal fun times(rhs: int) -> int;
  internal fun div(rhs: int) -> int;
  internal fun mod(rhs: int) -> int;

  internal fun bitwiseOr(rhs: int) -> int;
  internal fun bitwiseAnd(rhs: int) -> int;
  internal fun bitwiseXor(rhs: int) -> int;

  internal fun shiftLeft(rhs: int) -> int;
  internal fun shiftRight(rhs: int) -> int;
  internal fun unsignedShiftRight(rhs: int) -> int;

  internal fun unaryPlus() -> int;
  internal fun unaryMinus() -> int;
  internal fun not() -> int;
}

internal class long {
  internal fun toByte() -> byte;
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun equals(rhs: long) -> bool;
  internal fun compareTo(rhs: long) -> int;

  internal fun plus(rhs: long) -> long;
  internal fun minus(rhs: long) -> long;
  internal fun times(rhs: long) -> long;
  internal fun div(rhs: long) -> long;
  internal fun mod(rhs: long) -> long;

  internal fun bitwiseOr(rhs: long) -> long;
  internal fun bitwiseAnd(rhs: long) -> long;
  internal fun bitwiseXor(rhs: long) -> long;

  internal fun shiftLeft(rhs: long) -> long;
  internal fun shiftRight(rhs: long) -> long;
  internal fun unsignedShiftRight(rhs: long) -> long;

  internal fun unaryPlus() -> long;
  internal fun unaryMinus() -> long;
  internal fun not() -> long;
}

internal class Str {
  internal fun equals(rhs: Str) -> bool;
  internal fun compareTo(rhs: Str) -> int;

  internal fun len() -> int;
  internal fun parseInt() -> int;
  internal fun plus(rhs: Str) -> Str;

  internal fun get(idx: int) -> byte;
  internal fun set(idx: int, val: int);
}

internal class float {
  internal fun equals(rhs: float) -> bool;
  internal fun compareTo(rhs: float) -> int;

  internal fun plus(rhs: float) -> float;
  internal fun minus(rhs: float) -> float;
  internal fun times(rhs: float) -> float;
  internal fun div(rhs: float) -> float;

  internal fun unaryPlus() -> float;
  internal fun unaryMinus() -> float;

  internal fun isNan() -> bool;
}

internal class double {
  internal fun equals(rhs: double) -> bool;
  internal fun compareTo(rhs: double) -> int;

  internal fun plus(rhs: double) -> double;
  internal fun minus(rhs: double) -> double;
  internal fun times(rhs: double) -> double;
  internal fun div(rhs: double) -> double;

  internal fun unaryPlus() -> double;
  internal fun unaryMinus() -> double;

  internal fun isNan() -> bool;
}

internal class ByteArray {
  internal fun len() -> int;
  internal fun get(idx: int) -> byte;
  internal fun set(idx: int, val: byte);
}

internal class IntArray {
  internal fun len() -> int;
  internal fun get(idx: int) -> int;
  internal fun set(idx: int, val: int);
}

internal class LongArray {
  internal fun len() -> int;
  internal fun get(idx: int) -> long;
  internal fun set(idx: int, val: long);
}

internal fun loadFunction(name: Str) -> long;
internal fun call0(fct: long) -> long;
internal fun call1(fct: long, arg0: long) -> long;
internal fun call2(fct: long, arg0: long, arg1: long) -> long;
internal fun call3(fct: long, arg0: long, arg1: long, arg2: long) -> long;

internal fun native_malloc(size: long) -> long;
internal fun native_free(address: long);
internal fun set_uint8(address: long, val: byte);

fun native_string(val: Str) -> long {
  var i = 0;
  let len = val.len();

  let ptr = native_malloc(len.toLong()+1L);

  while i < len {
    set_uint8(ptr+i.toLong(), val[i]);
    i = i + 1;
  }

  set_uint8(ptr+len.toLong(), 0B);

  return ptr;
}

fun getpid() -> int {
  let fct = loadFunction("getpid");
  return call0(fct).toInt();
}

fun getppid() -> int {
  let fct = loadFunction("getppid");
  return call0(fct).toInt();
}

class File(let name: Str) {
  fun delete() throws {
    let ptr = native_string(self.name);
    let fct = loadFunction("unlink");
    let res = call1(fct, ptr);
    native_free(ptr);

    if res != 0L {
      throw Exception("could not delete file");
    }
  }
}

class Exception(msg: Str)